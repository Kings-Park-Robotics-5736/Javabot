{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "3. Intro to Command Based Programming (Intake)",
  "steps": [
    {
      "title": "Introduction",
      "description": "In this tutorial, we will look into Command Based Programming.  \r\n\r\nIn command based programming, we construct events. These events are invoked when some trigger happens. For instance, when a user presses a button. We saw simple examples of this in the first tutotiral when we configured events for the joystick. We will now take a look at some simple commands for our Intake subsystem"
    },
    {
      "file": "src/main/java/frc/robot/subsystems/intake/IntakeRollersSubsystem.java",
      "selection": {
        "start": {
          "line": 76,
          "character": 4
        },
        "end": {
          "line": 78,
          "character": 6
        }
      },
      "description": "Here is our first command for our intake rollers.  \r\nThis command follows the *run once* framework. It means that when this command is invoked (i.e. by a user pressing a button), it will run what is in the command exactly 1 time.  \r\nLooking at this stop method, it means that the program will call the function StopIntake exactly once. For an instant command, this is perfect. One call to StopIntake (which calls `setSpeed(0)`) is all we need for the intake to stop.  \r\n\r\nLooking further at this call, we see something in programming called a *lambda expression*. This is an advanced topic. Basically, think of it as a promise to do something in the future. Writing:  \r\n`StopIntake();`  \r\nwill instantly call the `StopIntake()` method.  \r\nWriting:  \r\n`()->StopIntake();`  \r\ndelays the function call to a point in the future. It is the code making a promise that in the future, we will call that method, but not right now.",
      "title": "Run Once command (Stop Intake)"
    },
    {
      "file": "src/main/java/frc/robot/subsystems/intake/IntakeRollersSubsystem.java",
      "selection": {
        "start": {
          "line": 80,
          "character": 5
        },
        "end": {
          "line": 89,
          "character": 6
        }
      },
      "description": "Here is a more complex command. This is called a functional command. It takes 4 arguments:  \r\n1. Code to run on initialization\r\n2. Code to run every iteration (in FRC, this is every 0.02 seconds)\r\n3. Code to run when either the command ends on its own terms, or is forcefully ended (like a user releasing a button)\r\n4. Code to run to detect if the command is done on its own terms.  \r\n\r\nNote that all of these are *lambdas*. Ther will all be executed in the future when the command is run (i.e. when the user presses the button to activate the intake), but they will not run *right now*.  \r\nLets take a closer look at each of these.",
      "title": "Functional Command (Run Intake Forward)"
    },
    {
      "file": "src/main/java/frc/robot/subsystems/intake/IntakeRollersSubsystem.java",
      "selection": {
        "start": {
          "line": 82,
          "character": 15
        },
        "end": {
          "line": 85,
          "character": 19
        }
      },
      "description": "On intialization, we print out an informational message to the user.  \r\nWe also set a stop flag to false; This flag will be used for us to know when the intake is done.",
      "title": "Functional Command - Initialization"
    },
    {
      "file": "src/main/java/frc/robot/subsystems/intake/IntakeRollersSubsystem.java",
      "selection": {
        "start": {
          "line": 86,
          "character": 17
        },
        "end": {
          "line": 86,
          "character": 63
        }
      },
      "description": "Every iteration (every 0.02 seconds), this will be called. This calls our RunIntake logic, which we learned in the last tutorial calculates what voltage we need to give our Motor Controller to acheive a desired speed. ",
      "title": "Functional Command - Every Iteration"
    },
    {
      "file": "src/main/java/frc/robot/subsystems/intake/IntakeRollersSubsystem.java",
      "selection": {
        "start": {
          "line": 87,
          "character": 17
        },
        "end": {
          "line": 87,
          "character": 46
        }
      },
      "description": "This is what is called when the command needs to stop. This could be invoked when the user presses (or releases) a button. Here, when we want the intake command to stop, we call `StopIntake()`.",
      "title": "Functional Command - Stop"
    },
    {
      "file": "src/main/java/frc/robot/subsystems/intake/IntakeRollersSubsystem.java",
      "selection": {
        "start": {
          "line": 88,
          "character": 17
        },
        "end": {
          "line": 88,
          "character": 29
        }
      },
      "description": "This is how we can tell when the command is done. In this case, we return the value our m_stop variable. Note that the line \r\n`()-> m_stop`  \r\nis shorthand for\r\n`()->{return m_stop;}`, which is simply a *lambda* function that returns the value of the m_stop variable",
      "title": "Functional Command - Conditional for Finishing"
    },
    {
      "file": "src/main/java/frc/robot/subsystems/intake/IntakeRollersSubsystem.java",
      "selection": {
        "start": {
          "line": 88,
          "character": 31
        },
        "end": {
          "line": 88,
          "character": 35
        }
      },
      "description": "Finally, all commands need to know what subsystems they use. To do this, we pass the command our object with the `this` keyword. This is critical to prevent 2 commands from running at the same time using the same subsystems. Imagine how bad it would be if commands telling the intake to run forward and backwards were running at the same time! The FRC WPILIB library ensures for us that this cannot happen",
      "title": "Functional Command - Subsystem Reference"
    },
    {
      "file": "src/main/java/frc/robot/subsystems/intake/IntakeSubsystem.java",
      "selection": {
        "start": {
          "line": 34,
          "character": 5
        },
        "end": {
          "line": 37,
          "character": 1
        }
      },
      "description": "We previously saw that to model our intake, we have an `IntakeSubsystem` object that contains 2 `IntakeRollerSubsystem` objects.  \r\nWe saw in our prior steps that each `IntakeRollerSubsystem` object has commands to run them.  \r\n\r\nNow we are missing a way for the program to simply *run the intake* as a whole; that is, tell the intake to run both rollers at the same time.  \r\n\r\nThis command, `RunIntakeForwardCommand` does that for us.  \r\nHere, we see a construct that allows us to run 2 commands at the same time: `Commands.parallel`. This means that when, for instance, a user presses a button that we mapped to this `RunIntakeForwardCommand`, it will run in parallel both the `top.RunIntakeForwardCommand` and the `bottom.RunIntakeForwardCommand`",
      "title": "Parallel Commands"
    },
    {
      "file": "src/main/java/frc/robot/RobotContainer.java",
      "selection": {
        "start": {
          "line": 152,
          "character": 16
        },
        "end": {
          "line": 153,
          "character": 83
        }
      },
      "description": "Now, lets see how our intake command is used.  \r\nHere, in Robot Container, when we initialize our joystick mapping, we map the B button the action controller joystick to the `RunIntakeForward` command .  \r\n",
      "title": "Using the Command with a Joystick"
    }
  ]
}