{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1. Intro to Swerve DriveTrain Code",
  "steps": [
    {
      "title": "Introduction",
      "description": "This tutorial will take you through all the important locations in the code base, and focus mainly on the drive train / swerve modules. It should be completed before any other walkthroughs."
    },
    {
      "file": "src/main/java/frc/robot/Main.java",
      "selection": {
        "start": {
          "line": 22,
          "character": 1
        },
        "end": {
          "line": 24,
          "character": 4
        }
      },
      "description": "Here is the main entry point into our robot code.  \r\nEvery java program always has a main() method. It is where the computer knows where to start executing the program.  \r\nHere, we can see that this calls a command to start our robot code (startRobot).  \r\n**Note, we never touch anything in this file.**",
      "title": "Robot Main"
    },
    {
      "file": "src/main/java/frc/robot/Robot.java",
      "selection": {
        "start": {
          "line": 31,
          "character": 3
        },
        "end": {
          "line": 39,
          "character": 4
        }
      },
      "description": "This is the first place that runs when the robot is started up. Any initialization code goes here.  \r\nIn this case, we can see that we create a *RobotContainer*, and create an *autonomousCommand*.  \r\nWe will later see what these do. ",
      "title": "Robot Init"
    },
    {
      "file": "src/main/java/frc/robot/Robot.java",
      "selection": {
        "start": {
          "line": 52,
          "character": 3
        },
        "end": {
          "line": 52,
          "character": 30
        }
      },
      "description": "This function, and all of the other functions in this file, we don't touch. We leave them as-is.  \r\nAny code that we need to add will be done in different places.  ",
      "title": "Robot Class"
    },
    {
      "file": "src/main/java/frc/robot/RobotContainer.java",
      "selection": {
        "start": {
          "line": 90,
          "character": 9
        },
        "end": {
          "line": 90,
          "character": 32
        }
      },
      "description": "Now we are getting to some actual robot code!  \r\nThis is the *constructor* for our *RobotContainer*. It will handle all of our high-level control for our robot.  \r\nThis *constructor* is called by the *new* function automatically in the previous file we looked at, [Robot.java][#3]:  \r\n`m_robotContainer = new RobotContainer();`  \r\n  \r\n  \r\nIn this method, you can see that we \r\n1. Configure the buttons on our joystick\r\n2. Do some configuration of our limelight\r\n3. Establish a driving command (don't worry too much about this for now).  ",
      "title": "Robot Container"
    },
    {
      "file": "src/main/java/frc/robot/RobotContainer.java",
      "selection": {
        "start": {
          "line": 45,
          "character": 7
        },
        "end": {
          "line": 60,
          "character": 99
        }
      },
      "description": "Here, we define a bunch of variables that we need for our robot.  \r\nThese variables here are all special. These are all *object instance* variables. This means they aren't just numbers or strings, but rather encompass (or to use a computer-science word, *'encapsulate'*) all the ideas of the robot components they represent.  \r\n\r\nWe define:\r\n1. A Raspberry Pi Camera object (corresponding with PiCamera.java)\r\n2. 2 LimeLight camera objects (corresponding with LimeLight.java)\r\n3. A Drive system object (corresponding with DriveSubsystem.java)\r\n4. An intake object (corresponding with IntakeRollersSubsystem.java)\r\n5. An Escalator object (corresponding with EscalatorAssemblySubsystem.java)\r\n6. A CommandMap object (corresponding with CommandMap.java)\r\n7. Multiple joystick filters to scale / limit the speed from raw joystick values\r\n8. 2 joystick controllers, one for driving and one for actions.",
      "title": "Robot Container Variables"
    },
    {
      "file": "src/main/java/frc/robot/RobotContainer.java",
      "selection": {
        "start": {
          "line": 116,
          "character": 8
        },
        "end": {
          "line": 116,
          "character": 47
        }
      },
      "description": "In this function, we define the mappings for our buttons on our joysticks. Let's see a couple.",
      "title": "Joystick Button Bindings"
    },
    {
      "file": "src/main/java/frc/robot/RobotContainer.java",
      "selection": {
        "start": {
          "line": 123,
          "character": 17
        },
        "end": {
          "line": 124,
          "character": 87
        }
      },
      "description": "Here, we say that *while the X button is held down, keep driving to a target distance of 1 meter*.  \r\nThis is a command; Later on, *when the program sees that the user presses the X button*, it will at that point perform the action (in this case, driving 1 meter). ",
      "title": "1st Joystick Button Example"
    },
    {
      "file": "src/main/java/frc/robot/RobotContainer.java",
      "selection": {
        "start": {
          "line": 154,
          "character": 17
        },
        "end": {
          "line": 155,
          "character": 83
        }
      },
      "description": "This command links the *B* button with the intake system. When the user presses the *B* button, it will toggle between the intake being on and off. ",
      "title": "2nd Joystick Button Example"
    },
    {
      "file": "src/main/java/frc/robot/RobotContainer.java",
      "selection": {
        "start": {
          "line": 67,
          "character": 67
        },
        "end": {
          "line": 67,
          "character": 96
        }
      },
      "description": "Here, we establish how we drive with the joystick.  \r\nFor the buttons, we established *triggers*. That means that when the user presses a button, we do an action.  \r\nHere, we can imagine this routine instead being called every .02 seconds.  \r\nEvery time this routine is called, we read the joystick positions, i.e.  \r\n`m_driverController.getLeftY()`.    \r\nand apply a deadband, use our speed limiters, and convert from the joystick value to an actual speed. ",
      "title": "Driving with Joysticks"
    },
    {
      "file": "src/main/java/frc/robot/RobotContainer.java",
      "selection": {
        "start": {
          "line": 84,
          "character": 17
        },
        "end": {
          "line": 84,
          "character": 77
        }
      },
      "description": "Finally, we tell our drive system to go ahead and drive using the values we calculated.  ",
      "title": "Driving With Joysticks (part 2)"
    },
    {
      "file": "src/main/java/frc/robot/subsystems/drive/DriveSubsystem.java",
      "selection": {
        "start": {
          "line": 283,
          "character": 7
        },
        "end": {
          "line": 283,
          "character": 57
        }
      },
      "description": "Now, we've reached how we actually drive our robot. This is the function that is called from Robot Container (in the prior step, [#11]).  \r\nThis function handles some special logic to work in auto mode (ignore for now), then uses libraries to convert the speeds to swerve module states (speed and rotation).  \r\nOnce we calculate the state, we tell the swerve modules to go to that state:  \r\n\r\n`m_frontLeft.setDesiredState(swerveModuleStates[0])`",
      "line": 264,
      "title": "Drive System Drive Function"
    },
    {
      "file": "src/main/java/frc/robot/subsystems/drive/DriveSubsystem.java",
      "selection": {
        "start": {
          "line": 32,
          "character": 2
        },
        "end": {
          "line": 39,
          "character": 45
        }
      },
      "description": "Backing up, in order to be able to use our swerve modules, we have to define them!  \r\nAt code initialization, we see here that we set a bunch of properties of our swerve modules, like the CAN ports for the motors, encoders, information about whether values are reversed/inverted, etc.  \r\n\r\nWe do this for all 4 of our swerve modules.",
      "title": "Drive System Swerve Modules Definitions"
    },
    {
      "file": "src/main/java/frc/robot/subsystems/drive/SwerveModule.java",
      "selection": {
        "start": {
          "line": 57,
          "character": 3
        },
        "end": {
          "line": 57,
          "character": 22
        }
      },
      "description": "We previously saw that to drive the robot, we calculate module states (speeds and rotation), and pass it along to the swerve module. We also saw that at code initialization, we created 4 swerve modules with individual properties.  \r\nHere, we see the constructor of SwerveModules.  Take a look at the code below, and see how we use all the properties we pass in. Some get passed to the motor libraries, some the encoder libraries. ",
      "title": "Swerve Module Initialization"
    },
    {
      "file": "src/main/java/frc/robot/subsystems/drive/SwerveModule.java",
      "selection": {
        "start": {
          "line": 129,
          "character": 1
        },
        "end": {
          "line": 130,
          "character": 1
        }
      },
      "description": "Here, this is where the actual swerve module states are set and converted into motor commands (to turn the module and turn the wheel). If you recall, this was called from the drive command in DriveSubsystem a few steps back ([#12]).  \r\nIn this function, we optimize our module rotation (so that we turn it in the shortest way possible), calculate how fast we should turn the wheel motor, and calculate how fast to turn the turning motor to reach the desired angle. \r\nFinally, we set the voltages for the turning and driving motors.",
      "title": "Setting Swerve Module States"
    },
    {
      "file": "src/main/java/frc/robot/Constants.java",
      "selection": {
        "start": {
          "line": 25,
          "character": 1
        },
        "end": {
          "line": 26,
          "character": 1
        }
      },
      "description": "Lastly, this Constants file holds all the hard-coded values used in this program. So far, we have seen values from DriveConstants (values pertaining to the drive train), ModuleConstants (values pertaining to the individual swerve modules), and IOConstants (values pertaining to the joysticks).  \r\nWe always organize all hard-coded values in this file. This makes them easy to find in the event they need to change.  \r\n\r\nThis completes the code walkthrough for the basic drive train components.  ",
      "title": "Constants File"
    }
  ],
  "description": "This walkthrough is an introduction to the main robot code, focusing on the drive train and swerve modules.",
  "isPrimary": true
}