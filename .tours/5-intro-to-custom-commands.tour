{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "5. Intro to Custom Commands",
  "steps": [
    {
      "title": "Introduction",
      "description": "Now, we will look at how to make a custom command.\r\nAll the commands we saw so far were simple commands relating to a subsystem. However, what if a command needs to maintain its own variables? This can get very messy if we try to still use the FunctionalCommands and runOnce commands.  \r\nInstead, we will make our own commands from scratch.  "
    },
    {
      "file": "src/main/java/frc/robot/commands/drive/DriveDistanceCommand.java",
      "selection": {
        "start": {
          "line": 15,
          "character": 1
        },
        "end": {
          "line": 15,
          "character": 34
        }
      },
      "description": "Here, we have a custom command to drive the robot a specific distance.  \r\nNote the verbiage, `extends CommandBase`. Like the SubSystemBase, we always need to *inherit* `CommandBase` when we write our own commands.",
      "title": "Drive Distance Command"
    },
    {
      "file": "src/main/java/frc/robot/commands/drive/DriveDistanceCommand.java",
      "selection": {
        "start": {
          "line": 33,
          "character": 12
        },
        "end": {
          "line": 33,
          "character": 32
        }
      },
      "description": "Here is our constructor for our custom command. We will take in the required subsystems (in this case, just the DriveSubsystem), as well as the desired distance to drive. ",
      "title": "Drive Distance Command Constructor"
    },
    {
      "file": "src/main/java/frc/robot/commands/drive/DriveDistanceCommand.java",
      "selection": {
        "start": {
          "line": 36,
          "character": 9
        },
        "end": {
          "line": 36,
          "character": 37
        }
      },
      "description": "If you recall, the last argument passed to the commands in the SubSystems (such as the FunctionalCommands) was the keyword `this`. That was so that the command knows what subsystem(s) it uses. Here, we use `addRequirements` to specify what subsystems the command uses, in this case, RobotDrive.",
      "title": "Adding Requirements"
    },
    {
      "file": "src/main/java/frc/robot/commands/drive/DriveDistanceCommand.java",
      "selection": {
        "start": {
          "line": 41,
          "character": 5
        },
        "end": {
          "line": 43,
          "character": 6
        }
      },
      "description": "This is the initialize method. This is called right before the command starts. Here, we initialize our motion profile",
      "title": "Initialize Function"
    },
    {
      "file": "src/main/java/frc/robot/commands/drive/DriveDistanceCommand.java",
      "selection": {
        "start": {
          "line": 95,
          "character": 24
        },
        "end": {
          "line": 95,
          "character": 60
        }
      },
      "description": "When we initialize our motion profile, we set our X and Y trapezoidal motion profiles to start at our current position (`reset(m_robotDrive.getPose().getX())`), set the tolerance, and set the end goal.",
      "title": "Initialize Function (Part 2)"
    },
    {
      "file": "src/main/java/frc/robot/commands/drive/DriveDistanceCommand.java",
      "selection": {
        "start": {
          "line": 103,
          "character": 9
        },
        "end": {
          "line": 103,
          "character": 56
        }
      },
      "description": "This ensures that the user cannot drive the robot with the joysticks while this command is running.  \r\nNOTE: This is actually redundant. When we did `addRequirements(robotDrive)` in the constructor, that also prevents the user from using the joysticks while this command is running.",
      "title": "Initialze Function (Part 3 - Lock Joystick)"
    },
    {
      "file": "src/main/java/frc/robot/commands/drive/DriveDistanceCommand.java",
      "selection": {
        "start": {
          "line": 52,
          "character": 5
        },
        "end": {
          "line": 63,
          "character": 6
        }
      },
      "description": "Here, we have the execute method, that is called every iteration (every 0.02 seconds). In this, we calculate drive speeds in the x and y direction, and command the robot to drive that way. ",
      "title": "Execute Function"
    },
    {
      "file": "src/main/java/frc/robot/commands/drive/DriveDistanceCommand.java",
      "selection": {
        "start": {
          "line": 66,
          "character": 5
        },
        "end": {
          "line": 68,
          "character": 6
        }
      },
      "description": "This method checks if we are finished running the command.",
      "title": "IsFinished Function"
    },
    {
      "file": "src/main/java/frc/robot/commands/drive/DriveDistanceCommand.java",
      "selection": {
        "start": {
          "line": 46,
          "character": 5
        },
        "end": {
          "line": 49,
          "character": 6
        }
      },
      "description": "This method is called when the command ends, either because IsFinished() returns true (command finished on its own), or the command was interrupted and forcefully stopped.  \r\nHere, we set the robot speed to 0 and unlock the joystick so the user can drive again.",
      "title": "End Function"
    },
    {
      "file": "src/main/java/frc/robot/commands/drive/DriveDistanceCommand.java",
      "selection": {
        "start": {
          "line": 15,
          "character": 1
        },
        "end": {
          "line": 15,
          "character": 54
        }
      },
      "description": "If you noticed, we have 4 main functions here:\r\n1. initialize\r\n2. execute\r\n3. end\r\n4. isFinished().\r\n  \r\nThese are the same 4 functions we would provide as *lambdas* when we created `FunctionalCommand`'s. (Refresher - [3. Intro to Command Based Programming (Intake)#3])\r\nThis is not a coincidence. The FunctionalCommand is called a *java factory*. It is a shorthand for automatically creating a class that looks exactly like this one. ",
      "title": "Summary and FunctionalCommand Comparison"
    }
  ]
}